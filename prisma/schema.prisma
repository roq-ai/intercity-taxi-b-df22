generator client {
  provider = "prisma-client-js"
  previewFeatures = ["clientExtensions", "postgresqlExtensions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  extensions      = [pgcrypto]
}

model booking {
  id               String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  journey_date     DateTime     @db.Date
  journey_time     DateTime     @db.Time(6)
  pickup_location  String       @db.VarChar(255)
  dropoff_location String       @db.VarChar(255)
  user_id          String       @db.Uuid
  organization_id  String       @db.Uuid
  created_at       DateTime     @default(now()) @db.Timestamp(6)
  updated_at       DateTime     @default(now()) @db.Timestamp(6)
  organization     organization @relation(fields: [organization_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  user             user         @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model business_owner {
  id              String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  joined_at       DateTime     @default(now()) @db.Timestamp(6)
  user_id         String       @db.Uuid
  organization_id String       @db.Uuid
  created_at      DateTime     @default(now()) @db.Timestamp(6)
  updated_at      DateTime     @default(now()) @db.Timestamp(6)
  organization    organization @relation(fields: [organization_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  user            user         @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model customer_support_representative {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  joined_at  DateTime @default(now()) @db.Timestamp(6)
  user_id    String   @db.Uuid
  created_at DateTime @default(now()) @db.Timestamp(6)
  updated_at DateTime @default(now()) @db.Timestamp(6)
  user       user     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model organization {
  id             String           @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  description    String?          @db.VarChar(255)
  name           String           @db.VarChar(255)
  created_at     DateTime         @default(now()) @db.Timestamp(6)
  updated_at     DateTime         @default(now()) @db.Timestamp(6)
  user_id        String           @db.Uuid
  tenant_id      String           @db.VarChar(255)
  booking        booking[]
  business_owner business_owner[]
  user           user             @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  team_member    team_member[]
}

model team_member {
  id              String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  joined_at       DateTime     @default(now()) @db.Timestamp(6)
  user_id         String       @db.Uuid
  organization_id String       @db.Uuid
  created_at      DateTime     @default(now()) @db.Timestamp(6)
  updated_at      DateTime     @default(now()) @db.Timestamp(6)
  organization    organization @relation(fields: [organization_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  user            user         @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model user {
  id                              String                            @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email                           String                            @unique @db.VarChar(255)
  firstName                       String?                           @db.VarChar(255)
  lastName                        String?                           @db.VarChar(255)
  roq_user_id                     String                            @db.VarChar(255)
  tenant_id                       String                            @db.VarChar(255)
  created_at                      DateTime                          @default(now()) @db.Timestamp(6)
  updated_at                      DateTime                          @default(now()) @db.Timestamp(6)
  booking                         booking[]
  business_owner                  business_owner[]
  customer_support_representative customer_support_representative[]
  organization                    organization[]
  team_member                     team_member[]
}
